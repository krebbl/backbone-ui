// This is the annotated source code for
// [VisualSearch.js](http://documentcloud.github.com/visualsearch/),
// a rich search box for real data.
//
// The annotated source HTML is generated by
// [Docco](http://jashkenas.github.com/docco/).

/** @license VisualSearch.js 0.2.0
 *  (c) 2011 Samuel Clay, @samuelclay, DocumentCloud Inc.
 *  VisualSearch.js may be freely distributed under the MIT license.
 *  For all details and documentation:
 *  http://documentcloud.github.com/visualsearch
 */

(function() {

	var $ = jQuery;
	// Handle namespaced jQuery

	// Setting up BackboneUI globals. These will eventually be made instance-based.
	if(!window.UI)
		window.UI = {};

	// Sets the version for BackboneUI to be used programatically elsewhere.
	UI.VERSION = '0.0.3';

	UI.lastID = 1;

	// create a unique ID for elements
	UI.createID = function() {
		return UI.lastID++;
	}
	// localize helper
	UI.loc = function(str) {
		return UI.Locale.localize(str);
	}
})();

(function(){
	UI.Binding = function(opt){
		this.init(opt);
	};
	
	UI.Binding.prototype = {
		event: 'change',
		callbacks: [],
		transform: function(val,model){
			return val;
		},
		init: function(opt){
			_.extend(this,opt);
		},
		// adds a callback to the model event 
		add: function(fnc, target){
			var cb = {
				fnc: this.createCallbackFnc(fnc,target),
				target: target
			}
			this.model.bind(this.getEventName(),cb.fnc,cb.target);
			
			this.callbacks.push(cb);
		},
		createCallbackFnc: function(fnc,target){
			var self = this;
			return function(model,value){
				fnc.call(target,self.transform(value,model));
			}
		},
		getEventName: function(){
			if(this.key != null){
				return this.event + ":" + this.key;
			}else{
				return this.event;
			}
		},
		// removes the callback
		remove: function(fnc){
			var self = this;
			_.each(this.callbacks, function(cb,i){
				if(cb.fnc == fnc){
					self.callbacks.slice(i,1);
				}
			});
			this.model.unbind(this.getEventName(),fnc);
		},
		removeByTarget: function(target){
			var self = this;
			var callback;
			_.each(this.callbacks, function(cb,i){
				if(cb.target == target){
					callback = cb;
					self.callbacks.slice(i,1);
				}
			});
			this.model.unbind(this.getEventName(),callback.fnc);
		},
		getValue: function(){
			if(this.key != null) {
				if(this.event == "change"){
					var val = this.model.get(this.key);
					return this.transform(val,this.model);
				}
			}
			return this.transform(null,this.model);
		},
		setValue: function(v,silent){
			if(_.isUndefined(silent)){
				var silent = true;
			}
			var s = {};
			s[this.key] = v;
			this.model.set(s,{silent: silent});
		},
		setModel : function(model){
			var self = this;
			var oldModel = this.model;
			this.model = model;
			_.each(this.callbacks,function(cb){
				oldModel.undbind('change:'+self.key,cb.fnc);
				self.add(cb.fnc,cb.target);
				self.model.trigger('change:'+self.key);
			});
		},
		trigger: function(){
			this.model.trigger('change:'+this.key);
		}
	}
})();

(function(){

	UI.ErrorFieldRenderer = function(view,error){
		
		
	};

})();

(function() {
	UI.Locale = (function(data) {
		var data = {};

		return {
			init : function(d) {
				data = d;
			},
			localize : function(str) {
				if(!_.isUndefined(data[str])) {
					return data[str];
				}
				return str;
			}
		}

	}());
})();

(function() {
	UI.LoadingMask = {
		renderLoadingMask : function(text) {
			if(_.isUndefined(text)) {
				text = "Lade Daten ...";
			}
			if(_.isUndefined(this.options.loadingMaskTemplate)) {
				this.options.loadingMaskTemplate = "loading_mask";
			};
			
			if(this.options.loadingMaskSelector){
				this.$loadingMask = this.$el.find(this.options.loadingMaskSelector);
			}else{
				this.$loadingMask = this.$el;
			}
			
			if(!this.options.loadingMaskClasses){
				this.options.loadingMaskClasses = 'ui-tooltip-shadow ui-tooltip-dark ui-tooltip-rounded';
			}
			
			this.$loadingMask.qtip({
				content : {
					text : JST[this.options.loadingMaskTemplate]({
						text : text
					})
				},
				position : {
					my : 'center', // Use the corner...
					at : 'center' // ...and opposite corner
				},
				show : {
					event : false, // Don't specify a show event...
				},
				hide : false, // Don't specify a hide event either!
				style : {
					classes : this.options.loadingMaskClasses
				}
			});
		},
		showLoadingMask : function() {
			this.$loadingMask.qtip('show');
		},
		hideLoadingMask : function() {
			this.$loadingMask.qtip('hide');
		}
	}
})();

// **BackboneUI** is a quick-and-dirty UI library based on the Backbone library
// It provides basic UI Elements like Lists, TabViews, Button, Input Elements etc

(function() {

	var $ = jQuery;
	// Handle namespaced jQuery

	UI.View = Backbone.View.extend({
		bindings : {},
		defaultOptions : {},
		// contains all direct childViews
		childViews : [],
		initialize : function() {
			// set default options
			this.options = _.extend({
				fitLayout : false,
				selectable : false,
				selected : false,
				templateRenderer : function(template, view) {
					return JST[template]({
						view : view
					})
				}
			}, this.defaultOptions, this.options);

			this.bindModelEvents();
			// set the callbacks
			this.initCallbacks();
			this.initBindings();
		},
		// binds to collection / model events
		bindModelEvents : function() {
			// EMPTY
		},
		// binds the view to the given callback events
		initCallbacks : function() {
			var self = this;
			if(this.options.callbacks) {
				_.each(this.options.callbacks, function(v, k) {
					if(_.isFunction(v)) {
						self.bind(k, v);
					}
				})
			}
		},
		// inits dynamic attribute binding
		// for example you can set a visibleBinding, which calls the setVisible method on property change
		// the property should than return a boolean value
		initBindings : function() {
			var self = this;
			this.bindings = {};
			_(this.options).each(function(b, k) {
				var i = k.lastIndexOf("Binding");
				if(i > 0) {
					var attr = k.substr(0, i);
					if(_.isFunction(b.add)) {
						b.add(function(value) {
							self.setOption(attr, value);
						}, self);
						// set the current values to the property object
						self.setOption(attr, b.getValue());
						self.bindings[attr] = b;
					}
				}
			});
		},
		// renders the view to the container
		render : function() {
			this.childViews = [];

			this.$el = $(this.el);

			this.$el.empty();

			if(_.isUndefined(this.options.container)) {
				throw "No container to render!";
			} else {
				this.$container = $(this.options.container);
			}

			this.$container.append(this.$el);

			// layout the element
			this.layoutElement();

			// render the content
			if(this.options.innerHTML) {
				this.renderInnerHTML(this.options.innerHTML);
			} else if(this.options.template) {
				this.renderInnerHTML(this.options.templateRenderer(this.options.template, this));
			}

			this.renderContent();

			// set the classname of the element

			this.renderClassName(this.className);
			this.renderVisible(this.options.visible);

			this.renderSelected(this.options.selected);
			this.renderSelectable(this.options.selectable);

			var self = this;
			this.$el.bind('click', function(e) {
				self.trigger('click', e, self);
			})

			this.afterRender();
			this.trigger('afterRender', this);
		},
		renderClassName : function(className) {
			this.$el.attr('class',className);
		},
		afterRender : function() {

		},
		// renders the view to a given container
		renderTo : function(container) {
			this.options.container = container;
			this.render();
		},
		layoutElement : function() {
			var self = this;
			if(this.options.fitLayout === true) {
				// TODO: remove! ... we don't want style here'
				this.$el.css({
					"float" : "left",
					"width" : "100%",
					"height" : "100%",
					// "position" : "relative",
					"overflow" : "hidden"
				});

				if(this.$container.context.nodeName == "BODY") {
					$(window).resize(function(e) {
						self.resize();
					});
				} else {
					this.$container.resize(function() {
						self.resize();
					});
				}
				// this.resize();
				this.$el.resize(function(e) {
					e.stopPropagation();
					// self.resizeContent();
				});
			} else {
				if(this.options.height) {
					this.$el.height(this.options.height);
				}
				if(this.options.width) {
					this.$el.width(this.options.width);
				}
			}

		},
		resize : function() {
			if(this.isVisible()) {
				this.$el.resize();
				this.resizeContent();
			}
		},
		resizeContent : function() {
			// can be overridden by subclasses
		},
		isVisible : function() {
			return this.$el.is(":visible");
		},
		// sets the visibility of the element
		renderVisible : function(visible) {
			if(visible === true) {
				this.$el.show();
				this.trigger('afterShow');
				var self = this;
				self.resize();
			} else if(visible === false) {
				this.trigger('beforeHide');
				this.$el.hide();
			}
		},
		// sets the model
		renderModel : function(model) {
			this.render();
		},
		// renders the content of the element, should be overridden by the sub views
		renderContent : function() {
			// empty
		},
		// renders a childView to a given target and pushes it to the array of childviews
		renderChildView : function(v, target) {
			if(_.isUndefined(target)) {
				var target = this.$el;
			}
			v.renderTo(target);
			this.childViews.push(v);
			var self = this;
			var events = ['beforeHide', 'afterShow'];
			_.each(events, function(e) {
				self.bind(e, function() {
					v.trigger(e);
				});
			});
		},
		removeChildView : function(view) {
			var self = this;
			var index = -1;
			_.each(this.childViews, function(v, i) {
				if(view == v) {
					index = i;
				}
			})
			if(index > -1) {
				this.childViews.splice(index, 1);
				view.remove();
			}
		},
		renderInnerHTML : function(html) {
			if(_.isFunction(this.options.htmlRenderer)) {
				html = this.options.htmlRenderer(html);
			}
			this.$el.html(html);
		},
		renderHeight : function(height) {
			this.$el.height(height);
			// this.resize();
		},
		renderWidth : function(width) {
			this.$el.width(width);
			// this.resize();
		},
		getHeight : function() {
			return this.$el.height();
		},
		getWidth : function() {
			return this.$el.width();
		},
		// sets selectable property
		renderSelectable : function(selectable) {
			if(selectable === true) {
				var self = this;
				this.$el.bind('click.selected', function() {
					self.set({
						selected : !self.isSelected()
					});
				});
			} else if(selectable === false) {
				this.$el.unbind('click.select');
				this.set({
					selected : false
				});
			}

		},
		// returns true if the view is selected
		isSelected : function() {
			return !_.isUndefined(this.options.selected) && this.options.selected === true;
		},
		// set view selected, adds "selected" className to element
		renderSelected : function(selected) {
			if(this.options.selectable !== true)
				return;
			//console.log([selected])
			if(selected === true) {
				this.$el.addClass('selected');

			} else if(selected === false) {
				this.$el.removeClass('selected');
			}
		},
		// return true, if a given option is set
		hasOption : function(attr) {
			return !_.isUndefined(this.options[attr]) && this.options[attr] != null;
		},
		set : function(obj, silent) {
			if(_.isObject(obj)) {
				var self = this;
				_.each(obj, function(value, attr) {
					self.setOption(attr, value, silent);
				});
			}
		},
		setOption : function(attr, value, silent) {
			var oldValue;
			// set the option attr
			if(attr == "className" || attr == "model" || attr == "collection") {
				oldValue = this[attr];
				this[attr] = value;
			} else {
				oldValue = this.options[attr];
				this.options[attr] = value;
			}
			
			// after try to render
			this._renderOption(attr, value, oldValue);

			if(!silent) {
				// then trigger the change
				this.trigger('change:' + attr, this, value);
			}

		},
		// try to render the attr value pair
		_renderOption : function(attr, value, oldValue) {
			if(!this.isRendered())
				return;
			attr = attr[0].toUpperCase() + attr.substr(1);
			var method = "render" + attr;
			
			if(_.isFunction(this[method])) {
				this[method](value,oldValue);
			}
		},
		// gets option value
		get : function(attr) {
			return this.options[attr];
		},
		// has option set?
		has : function(attr) {
			return !_.isUndefined(this.options[attr])
		},
		//
		remove : function() {
			// remove bindings!
			var self = this;
			_.each(this.bindings, function(binding) {
				binding.removeByTarget(self);
			});
			// remove childViews
           while(this.childViews.length > 0){
               this.removeView(this.childViews[0]);
           }
			if(this.isRendered()) {
				// remove element from dom
				this.$el.remove();

				// delete $el
				delete this.$el;
			}
		},
		// returns true, if the element is rendered
		isRendered : function() {
			return !_.isUndefined(this.$el);
		},
		// returns true if a container is set
		hasContainer : function() {
			return !_.isUndefined(this.options.container);
		},
		// returns the attribute binding
		getBinding : function(attr) {
			return this.bindings[attr];
		},
		focus : function() {
			this.$el.focus();
		}
	});
})();

(function() {

	UI.ListView = UI.View.extend({
		defaultOptions : {
			// the default key for the item id
			itemIdKey : "cid",
			// the default item to view function
			selectable : false,
			multiSelect : false,
			needsSelection : false,
			hasLoadingMask : true
		},
		tagName : 'ul',
		renderedItems : [],
		// list of all items / models
		// collection
		// list of items
		// list of childviews
		itemToView : null,
		// render the content of this view
		renderContent : function() {
			var self = this;

			this.renderedItems = [];

			if(this.options.childViews) {
				this.renderChildViews(this.options.childViews);
			} else if(this.collection) {
				this.renderCollection(this.collection);
			} else if(this.options.items) {
				this.renderItems(this.options.items);
			}

			if(this.options.needsSelection === true) {
				if(this.getSelectedViews().length == 0 && this.childViews.length > 0) {
					var v = this.childViews[0];
					v.set({
						selected : true
					});

					// this.selectView(v);
				}
			}

			if(this.options.hasLoadingMask === true) {
				this.renderLoadingMask();
			}
		},
		// create a DOM Element for the list item
		createListElement : function() {
			var listItems = this.$el.children('li');
			var li = $(document.createElement('li'));
			if(listItems.length == 0) {
				li.addClass('first');
			}
			listItems.last().removeClass('last');
			li.addClass('last');

			this.$el.append(li);

			return li;
		},
		// removes the DOM element from the list
		removeListElement : function(index) {
			var li = $(this.$el.children().get(index));
			if(li.hasClass('first')) {
				li.next().addClass('first');
			} else if(li.hasClass('last')) {
				li.prev().addClass('last');
			}
			li.remove();
		},
		// add a child view to the list view
		addView : function(view) {
			var target = this.createListElement();
			if(_.isFunction(view.render)) {
				this.renderChildView(view, target);

				var self = this;
				// add events
				// view.setSelectable(self.options.selectable);
				view.bind('change:selected', function(v, selected) {
					if(selected === true) {
						self.selectView(v);
					} else if(selected === false && self.needsSelection === true) {
						if(self.getSelectedViews().length == 0) {
							v.set({
								selected : true
							},true);
						}
					}
				});
			}

			this.resize();
		},
		// remove a view childview from the listview
		removeView : function(view) {
			var self = this;
           var i = -1;
           _.each(this.childViews, function(childView, index) {
				if(childView == view) {
                   // IMPORTANT: first remove inner view, then the surrounding list element
					view.remove();
					self.removeListElement(index);
                   i = index;
				}
			});
           if(i > -1){
               this.childViews.splice(i,1);
           }

           this.resize();
		},
		// item to the view
		addItem : function(item) {
			// console.log([item,this.options.itemToView]);
			if(!_.isFunction(this.options.itemToView)) {
				throw "No item to view function defined"
			}
			var view = this.options.itemToView(item);
			this.addView(view);
			this.renderedItems.push(item);
		},
		// remove item from view
		removeItem : function(item) {
           var view = this.getViewByItem(item);

			if(view != null) {
               var i = this.getIndexOfView(view);
               this.removeView(view);
               if(i > -1){
                   this.renderedItems.splice(i,1);
               }

           }


		},
		getViewByItem : function(item) {
			var index = this.getIndexOfItem(item);
			if(index > -1) {
				return this.childViews[index];
			} else {
				return null;
			}
		},
		renderCollection : function(collection, oldCollection){
			this.clearItems();
			var self = this;
			if(oldCollection){
				// remove old events
				oldCollection.unbind('add',this.addItem,this);
				oldCollection.unbind('remove',this.removeItem,this);
				oldCollection.unbind('reset',this.renderCollection,this);
			};
			// bind events for new collection
			collection.bind('add', this.addItem, this);
			collection.bind('remove',this.removeItem, this);
			collection.bind('reset', this.renderCollection, this);
		
			collection.each(function(model){
				self.addItem(model);
			});
		},
		renderChildViews: function(childViews){
			var self = this;
			_.each(childViews, function(childView) {
				self.addView(childView);
			})
		},
		// renders an array of items to the view
		renderItems : function(items) {
			this.clearItems();
			var self = this;
			_.each(items, function(item) {
				self.addItem(item);
			});
		},
		clearItems : function() {
			var self = this;

			while(this.renderedItems.length > 0){
				this.removeItem(this.renderedItems[0]);
			};
		},
		// returns the number of list items
		getSize : function() {
			return _.size(this.renderedItems);
		},
		// selects the view of the given item
		selectItem : function(item) {
			var view = this.getViewByItem(item);
			this.selectView(view);
		},
		// selects a view and deselect other views if multiSelect === false
		selectView : function(view) {

			var self = this;
			_.each(this.childViews, function(v, i) {
				// console.log([i, v.isSelected()]);
				if(v != view && self.options.multiSelect !== true && v.isSelected()) {
					v.set({
						selected : false
					});
				}
			});

			this.set({
				selectedViews : this.getSelectedViews(),
				selectedItems : this.getSelectedItems()
			});
		},
		getSelectedItems : function() {
			var selectedItems = [];
			var self = this;
			_.each(this.renderedItems, function(item, i) {
				if(self.childViews[i].isSelected()) {
					selectedItems.push(item);
				};
			});
			return selectedItems;
		},
		getSelectedViews : function() {
			var selectedViews = [];
			_.each(this.childViews, function(view, i) {
				if(view.isSelected()) {
					selectedViews.push(view);
				};
			});
			return selectedViews;
		},
		getIndexOfView : function(view) {
			var index = -1;
			_.each(this.childViews, function(v, i) {
				if(v == view) {
					index = i;
				};
			});
			return index;
		},
		getIndexOfItem: function(item){
			var index = -1;
			_.each(this.renderedItems, function(it, i) {
				if(it == item) {
					index = i;
					return;
				}
			});
			return index;
		}
	});

	_.extend(UI.ListView.prototype, UI.LoadingMask);

})();

(function() {

	UI.FieldView = UI.View.extend({
		tagName : 'div',
		renderContent: function(){
			
		},
		bindModelEvents: function(){
			if(this.model && this.options.field){
				var self = this;
				this.model.bind('change:'+this.options.field,this.onModelValueChange,self);
				this.model.bind('error', this.onModelError, self);
			}
		},
		renderContent : function() {
			// set default options
			this.options = _.extend({},{enable: true,silentChange: false, unsetOnDisable: false, errorRenderer: UI.FieldErrorRenderer, fieldTemplate: 'field'},this.options);
			
			// render template
			this.$el.html(JST[this.options.fieldTemplate]({view: this}));
			
			if(_.isUndefined(this.options.fieldId)){
				this.options.fieldId = "field-"+UI.createID();
			}
			if(_.isUndefined(this.options.name)){
				this.options.name = this.options.fieldId;
			}
			this.fieldID = this
			this.$el.find('label').first().attr('for',this.options.fieldId);
			this.renderLabel(this.options.label);
			
			this.$inputWrapper = this.$el.find('div.input').first();
			if(this.options.inputTemplate){
				this.$inputWrapper.html(JST[this.options.inputTemplate]({view: this}));
			}
			this.renderInputElement();
			
			this.bindInputEvents();
			
			var value = this.options.value;			
			if(this.model && this.options.field){
				value = this.model.get(this.options.field);
			}			
			this.renderValue(value);
			
			if(this.options.errors){
				this.renderError(this.options.error);
			}
			
			this.renderEnable(this.options.enable);
		},
		onInputValueChange: function(){
			var valueBinding = this.bindings['value'];
			var val = this.getValueForModel();
			if(valueBinding){
				valueBinding.setValue(val,this.options.silentChange);
			}else if(this.model && this.options.field){
				if(val != null){
					var v = {}; v[this.options.field] = val;
					this.model.set(v,{silent: this.options.silentChange});
				}else{
					// unset the value
					if(this.options.unsetOnDisable === true){
						this.model.unset(this.options.field);
					}
					
				}
			}
			this.options.value = val;
			this.trigger('valueChanged',this,val);
		},
		onModelValueChange: function(){
			this.set({value: this.model.get(this.options.field)});
		},
		renderValue: function(value){
			this.renderInputValue(value);
		},
		renderError: function(error){
			if(_.isUndefined(error) || error == null){
				this.$el.removeClass("has-error");
				this.$el.find('.error').first().html("");
			}else{
				this.$el.addClass("has-error");
				if(_.isArray(error)) error = error[0];
				this.options.errorRenderer(this, error);
			}
			
		},
		onModelError: function(model, error){
			console.log("ERROR")
			if(!_.isUndefined(error)){
				var fieldError = error[this.options.field];
				this.set({error: fieldError});
			}
		},
		renderLabel: function(label){
			if(_.isUndefined(label)){
				label = "";
			}
			this.$el.find('label').first().html(label);
		},
		renderEnable: function(enabled){
			if(!_.isFunction(this.getInputElement)) return;
			// console.log("render enable");
			if(enabled === false){
				this.$el.addClass('disabled');
				this.getInputElement().attr('disabled','disabled');
				this.onInputValueChange();
				this.trigger('disable',this);
			}else if(enabled === true){
				this.$el.removeClass('disabled');
				this.getInputElement().removeAttr('disabled');
				this.onInputValueChange();
				this.trigger('enable',this);
			}
		},
		getValueForModel: function(){
		
		},
		renderInputElement: function(){
			
		},
		bindInputEvents: function(){
			
		},
		renderInputValue: function(value){
		
		}
	});
	
	// The default FieldErrorRenderer, can be overridden for specific default error displaying
	UI.FieldErrorRenderer = function(view,error){
		view.$el.find('.error').html(error);
	};

})();

(function() {

	UI.ButtonView = UI.View.extend({
		tagName: 'button',
		defaultOptions : {
			fitLayout : false,
			template: 'button',
			label: "",
			selectable: true,
			labelSelector: 'span.label'
		},
		renderContent: function(){
			if(this.hasIcon()){
				this.$el.addClass('has-icon');
			}else{
				this.$el.removeClass('has-icon');			
			}
		},
		renderLabel: function(label){
			this.$el.find(this.options.labelSelector).first().html(label);
		},
		getLabel: function(){
			return this.options.label;
		},
		hasLabel: function(){
			return this.hasOption('label');
		},
		hasIcon: function(){
			return this.hasOption('iconClass');
		},
		getIconClass: function(){
			return this.options.iconClass;
		},
		renderIconClass: function(iconClass){
			this.render();
		},
		renderEnable: function(enable){
			if(enable === true){
				this.$el.removeAttr('disabled');
			}else if(enable === false){
				this.$el.attr('disabled','disabled');
			}
		}
	});

})();

(function() {

	UI.ContainerView = UI.ListView.extend({
		tagName : 'div',
		// create a DOM Element for the list item
		createListElement : function() {
			return this.$el;
		}
	});

})();

(function() {

	UI.DialogView = UI.View.extend({
		defaultOptions : {
			title : '',
			template : 'dialog',
			modal : false,
			closable : true,
			closeOnEscape : true,
			draggable : true,
			headerSelector : '.dialog-header',
			titleSelector : '.dialog-header h3',
			footerSelector : '.dialog-footer',
			contentSelector : '.dialog-content',
			closeSelector : '.dialog-header .close',
			modalClass : 'modal-backdrop'
		},
		render : function() {
			this.childViews = [];

			this.$el = $(this.el);
			if(_.isUndefined(this.options.container)) {
				this.$container = $(document.body);
			} else {
				this.$container = $(this.options.container);
			}
			 
			
			this.$el.css({
				display: "none",
				top : '20%',	
				position : 'fixed',
				"z-index" : 10002
			});
			
			if(this.options.modal === true) {

				if(this.$container.has('.' + this.options.modalClass).length == 0) {
					this.$modal = $(document.createElement('div')).css({
						display : 'none',
						position : 'fixed',
						left : 0,
						right : 0,
						top : 0,
						bottom : 0,
						background : 'black',
						opacity : 0.5,
						"z-index" : 10001
					}).addClass(this.options.modalClass);
					this.$container.append(this.$modal);
				}else{
					this.$modal = this.$container.find('.' + this.options.modalClass).first();
				};
			}
			this.$container.append(this.$el);
			// layout the element
			this.layoutElement();
			
			// render the content
			this.renderInnerHTML(JST[this.options.template]({
				view : this
			}));
			
			this.renderClassName(this.className);
			this.renderVisible(this.options.visible);

			// render the content
			if(this.options.contentView) {
				this.renderChildView(this.options.contentView, this.$el.find(this.options.contentSelector));
			}

			// render the footer
			if(this.options.footerView) {
				this.renderChildView(this.options.footerView, this.$el.find(this.options.footerSelector));
			}

			if(this.options.draggable == true) {
				this.$el.draggable({
					containment : this.$container
				});
			}
			
			this.renderTitle(this.options.title);
			this.renderClosable(this.options.closable);
			
			// last but not least set the horizontal alignment
			var xOffset = 0;
			if(_.isUndefined(this.options.container)) {
				xOffset= $(document).width();
			} else {
				xOffset = (this.$container.width());
			}
			this.$el.css({left :  (xOffset / 2) - (this.$el.width() / 2)});
		},
		renderTitle : function(title) {
			this.$el.find(this.options.titleSelector).html(title);
		},
		renderClosable : function(closable) {
			if(this.options.closable === false) {
				this.$el.find(this.options.closeSelector).hide();
			}
		},
		setCloseOnEscape : function(closeOnEscape) {
			this.options.closeOnEscape = closeOnEscape;
		},
		bindEvents : function() {
			var self = this;
			if(this.options.closable === true) {
				this.$el.find(this.options.closeSelector).click(function() {
					self.close();
				});
				if(this.options.closeOnEscape === true) {
					if(!this.eventHandler) {
						var self = this;
						this.eventHandler = {
							keyUp : function(e) {
								switch (e.which) {
									case 27: self.close(); break;
								}
								self.trigger('keyUp', e, self);
							}
								
						}
					}
					$(document.body).keyup(this.eventHandler.keyUp);
				}
			}
		},
		renderContentView: function(view){
			// remove old
			if(this.options.contentView){
				this.removeChildView(this.options.contentView);
			}
			//  render it
			this.renderChildView(view,this.$el.find(this.options.contentSelector));
			
		},
		unbindEvents : function() {
			if(this.eventHandler) {
				$(document.body).unbind('keyup', this.eventHandler.keyUp);
			}
			this.$el.find(this.options.closeSelector).unbind('click');
		},
		close : function() {
			if(!this.isRendered()) return;
			this.unbindEvents();
			if(this.$modal){
				this.$modal.hide();
			}
			this.$el.hide();
			this.trigger('close', this);
		},
		open : function() {
			if(!this.isRendered()){
				this.render();
			}
			this.bindEvents();
			if(this.$modal){
				this.$modal.show();
			}
			this.$el.show();
			this.$el.focus();
			this.trigger('open', this);
		},
		triggerEnterPressed : function(){
			this.trigger('enterPressed',this);
		}
	});
	
	
	var createMessageBox = function(title, type, contentView, footerView){
		return new UI.DialogView({
				className : 'alert-dialog '+type,
				title : title,
				modal : true,
				contentView : contentView,
				footerView : footerView
			})
	}
	
	UI.DialogView.confirm = function(title, message, callback) {
		var self = this;
		self.callback = callback;
		if(!this.confirmDialog) {
			this.confirmLabel = new UI.View({
				tagName : 'p',
				innerHTML : message
			});
			
			var footerView = new UI.ContainerView({
					layout : false,
					childViews : [new UI.ButtonView({
						className: 'cancel',
						label : 'Nein',
						callbacks : {
							'click' : function() {
								self.confirmDialog.close();
								self.callback(false);
							}
						}
					}),new UI.ButtonView({
						className: 'confirm',
						label : 'Ja',
						callbacks : {
							'click' : function() {
								self.confirmDialog.close();
								self.callback(true);
							}
						}
					})]
				});
			
			this.confirmDialog = createMessageBox(title,"warning",this.confirmLabel, footerView)
		} else {
			this.confirmLabel.set({innerHTML: message, title: title});
		}
		this.confirmDialog.open();
	}

	UI.DialogView.alert = function(title, message, callback) {
		var self = this;
		self.callback = callback;
		if(!this.alertDialog) {
			this.alertLabel = new UI.View({
				tagName: 'p',
				innerHTML : message
			});
			
			var footerView = new UI.ContainerView({
					childViews : [new UI.ButtonView({
						className : 'right',
						label : 'Okay',
						callbacks : {
							'click' : function() {
								self.alertDialog.close();
								self.callback();
							}
						}
					})]
				});
			
			this.alertDialog = createMessageBox(title,"alert",this.alertLabel, footerView)
		} else {
			this.alertLabel.setInnerHTML(message);
			this.alertDialog.setTitle(title);
		}
		this.alertDialog.open();
	}

	UI.DialogView.info = function(title, message, callback) {
		var self = this;
		self.callback = callback;
		if(!this.infoDialog) {
			this.infoLabel = new UI.View({
				tagName: 'p',
				innerHTML : message
			});
			
			var footerView = new UI.ContainerView({
					layout : false,
					childViews : [new UI.ButtonView({
						className : 'right',
						label : 'Okay',
						callbacks : {
							'click' : function() {
								self.infoDialog.close();
								self.callback();
							}
						}
					})]
				});
			
			this.infoDialog = createMessageBox(title,"info",this.infoLabel, footerView)
		} else {
			this.infoLabel.set({innerHTML: message, title: title});
		}
		this.infoDialog.open();
	}
})();

(function() {
	UI.FieldsetView = UI.View.extend({
		tagName : 'fieldset',
		renderContent : function() {
			if(this.options.legend) {
				this.$el.append($(document.createElement('legend')).html(this.options.legend));
			}
			this.renderChildView(this.options.contentView);
		}
	});
})();

(function() {

	UI.ImageView = UI.View.extend({
		tagName : 'img',
		defaultOptions : {
			src: 'blank',
		},
		renderContent : function() {
			this.renderSrc(this.options.src);
			this.renderAlt(this.options.alt);
			
		},
		// sets the href attribute of the link element
		// if href is not defined, the href attribute is set to javascript: void(0);
		renderSrc : function(src) {
			this.$el.attr('src', src);
		},
		renderAlt: function(alt){
			if(_.isUndefined(alt)){
				this.$el.removeAttr('alt');
			}else{
				this.$el.attr('alt',alt);
			}
		}
	});

})();

(function() {

	UI.LinkView = UI.ButtonView.extend({
		tagName : 'a',
		defaultOptions : {
			fitLayout : false,
			template : 'link',
			label : "",
			toggle : false,
			labelSelector: 'span.label'
		},
		renderContent : function() {
			this.renderSelected(this.options.selected);

			this.renderHref(this.options.href);

			// must be called after setHref
			this.renderLinkTarget(this.options.linkTarget);

			this.set({
				menuView : this.options.menuView
			});
		},
		// sets the href attribute of the link element
		// if href is not defined, the href attribute is set to javascript: void(0);
		renderHref : function(href) {
			if(_.isUndefined(href)) {
				href = "#";
				this.$el.attr('onclick', 'return false;');
			} else {
				this.$el.removeAttr('onclick');
			}
			this.$el.attr('href', href);
		},
		// sets the target of the link, if the href attribute is set
		// if the target is undefined, it is set to _blank
		renderLinkTarget : function(target) {
			if(!this.has('href')) {
				this.$el.removeAttr('target');
				this.options.linkTarget = "";
				return;
			}

			if(_.isUndefined(target)) {
				this.$el.removeAttr('target');
			} else {
				this.$el.attr('target', target);
			}
		},
		renderMenuView : function(menuView) {
			var self = this;
			// remove old menuView
			this.removeChildView(this.options.menuView);

			// render menuView, bind events
			if(menuView) {
				var self = this;

				this.renderChildView(menuView, this.$el.parent());
				this.$el.parent().addClass('dropdown');

				this.$el.bind('click.dropdown', function(e) {
					if(e) {
						e.stopPropagation();
						e.preventDefault();
					}
					var parent = self.$el.parent();
					parent.toggleClass('open');
				});
				$(document.body).bind('click.dropdown' + this.cid, function(e) {

					self.$el.parent().removeClass('open');
				});
			} else {
				// remove class!
				this.$el.parent().removeClass('dropdown');

				// remove events

				this.$el.unbind('click.dropdown');
				$(document.body).unbind('click.dropdown' + this.cid);

			}
			this.options.menuView = menuView;
		}
	});

})();

(function() {
	UI.ModelErrorsView = UI.View.extend({
		defaultOptions : {
			template : 'message_box',
			messageSelector : 'p',
			errorFormatter : function(model, error) {
				if(_.isArray(error) || _.isObject(error)) {
					return _.size(error) + " errors";
				} else if(_.isString(error)) {
					return error;
				}
				return "";
			}
		},
		bindModelEvents : function() {
			if(this.model) {
				this.model.bind('error', this.onModelError, this);
			}
		},
		afterRender: function(){
			this.setVisible(false);
			this.setError(this.model.error);
		},
		onModelError : function(model, error) {
			if(error && (_.isString(error) || _.size(error) > 0)) {
				this.setError(error);
				this.setVisible(true);
			} else {
				this.setVisible(false);
			}
		},
		setError : function(error) {
			this.options.error = error;
			if(!this.isRendered()) return;
			this.$el.find('p').html(this.options.errorFormatter(this.model, error));
		}
	});
})();

(function() {

	UI.ScrollView = UI.View.extend({
		defaultOptions : {
			// the default key for the item id
			contentView : null,
			minBarHeight : 30
		},
		renderContent : function() {
			var self = this;
			var me = $(document.createElement("div"));

			this.$me = me;

			this.$el.append(me);

			var contentView = this.options.contentView;
			if(contentView) {
				this.renderChildView(contentView, me);

				contentView.$el.resize(function(){
					self.calculateScrollbarHeight();
				});
			}
			me.css({
				height : this.$el.outerHeight(),
				overflow : "hidden"
			});

			var isOverPanel, isOverBar, isDragg, queueHide, divS = '<div></div>', minBarHeight = 30, wheelStep = 30, o = o || {}, cwidth = o.width || 'auto', cheight = o.height || '250px', size = o.size || '7px', color = o.color || '#000', position = o.position || 'right', opacity = o.opacity || .4;

			this.$el.css({
				position : 'relative',
				overflow : 'hidden'
			});

			this.$rail = $(divS).css({
				width : '15px',
				height : '100%',
				position : 'absolute',
				top : 0
			});

			this.$bar = $(divS).attr({
				'class' : 'slimScrollBar ',
				style : 'border-radius: ' + size
			}).css({
				background : color,
				width : size,
				position : 'absolute',
				top : 0,
				opacity : opacity,
				display : 'none',
				BorderRadius : size,
				MozBorderRadius : size,
				WebkitBorderRadius : size,
				zIndex : 99
			});

			var rail = this.$rail;
			var bar = this.$bar;

			//set position
			var posCss = (position == 'right') ? {
				right : '1px'
			} : {
				left : '1px'
			};
			this.$rail.css(posCss);
			this.$bar.css(posCss);

			//calculate scrollbar height and make sure it is not too small
			this.calculateScrollbarHeight();

			this.$el.append(this.$bar);
			this.$el.append(this.$rail);

			//make it draggable

			this.$bar.draggable({
				axis : 'y',
				containment : 'parent',
				start : function() {
					isDragg = true;
				},
				stop : function() {
					isDragg = false;
					hideBar();
				},
				drag : function(e) {
					//scroll content
					scrollContent(0, $(this).position().top, false);
				}
			});

			//show on parent mouseover
			me.hover(function() {
				isOverPanel = true;
				showBar();
			}, function() {
				isOverPanel = false;
				hideBar();
			});
			var _onWheel = function(e) {
				//use mouse wheel only when mouse is over
				if(!isOverPanel) {
					return;
				}

				var e = e || window.event;

				var delta = 0;
				if(e.wheelDelta) {
					delta = -e.wheelDelta / 120;
				}
				if(e.detail) {
					delta = e.detail / 3;
				}

				//scroll content
				scrollContent(0, delta, true);

				//stop window scroll
				if(e.preventDefault) {
					e.preventDefault();
				}
				e.returnValue = false;
			}
			var scrollContent = function(x, y, isWheel) {
				var delta = y;

				if(isWheel) {
					//move bar with mouse wheel
					delta = bar.position().top + y * wheelStep;

					//move bar, make sure it doesn't go out
					delta = Math.max(delta, 0);
					var maxTop = me.outerHeight() - bar.outerHeight();
					delta = Math.min(delta, maxTop);

					//scroll the scrollbar
					bar.css({
						top : delta + 'px'
					});
				}

				//calculate actual scroll amount
				percentScroll = parseInt(bar.position().top) / (me.outerHeight() - bar.outerHeight());
				delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

				if(percentScroll == 1.0) {
					// self.trigger('scrollBottom', self);
				}
				if(percentScroll == 0.0) {
					// self.trigger('scrollTop', self);
				}

				//console.log([bar.position().top,me.outerHeight(),bar.outerHeight()]);
				//scroll content
				me.scrollTop(delta);

				//ensure bar is visible
				showBar();
			}
			var attachWheel = function() {
				if(window.addEventListener) {
					this.addEventListener('DOMMouseScroll', _onWheel, false);
					this.addEventListener('mousewheel', _onWheel, false);
				} else {
					document.attachEvent("onmousewheel", _onWheel)
				}
			}
			//attach scroll events
			attachWheel();

			var showBar = function() {
				clearTimeout(queueHide);
				bar.fadeIn('fast');
			}
			var hideBar = function() {
				queueHide = setTimeout(function() {
					if(!isOverBar && !isDragg) {
						bar.fadeOut('slow');
					}
				}, 1000);
			}
		},
		calculateScrollbarHeight : function() {
			var me = this.$me;
			var height = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), this.options.minBarHeight);
			this.$bar.css({
				height : height + 'px'
			});
		},
		resizeContent : function() {
			if(this.$me && this.$bar) {
				this.$me.css({
					height : this.$el.outerHeight(),
					overflow : "hidden"
				});
				this.calculateScrollbarHeight();
			}
		}
	})

})();

(function() {

	UI.SegmentedView = UI.View.extend({
		defaultOptions : {
			fitLayout : true
		},
		renderContent : function() {
		},
		renderVisibleView : function(v) {
			_.each(this.childViews, function(view) {
				if(view != v && view.isVisible()) {
					view.set({visible: false});
				}
			});
			if(!_.include(this.childViews, v)) {
				// lazy render
				this.renderChildView(v);
			} else if(this.currentView != v) {
				v.set({visible : true});
			}
			this.currentView = v;
		},
		getCurrentView: function(){
			return this.currentView;
		}
	});

})();

(function() {

	Backbone.Model.prototype.toSlickItem = function() {
		var item = {};
		_.extend(item, this.attributes);
		var self = this;

		// fetch all getter methods and set value;
		for(var k in this) {
			if(k.length > 3) {
				var fn = this[k];
				if(_.isFunction(fn)) {
					var i = k.indexOf("get");
					if(i > -1) {
						
						var key = k.substr(3);
						key = key[0].toLowerCase() + key.substr(1);
						item[key] = this[k]();
					}
				}
			}
		}

		return item;
	}

	UI.SlickGridView = UI.View.extend({
		defaultOptions : {
			// the default key for the item id
			itemIdKey : "id",
			selection : new Backbone.Collection(),
			columns : [],
			loadingMaskSelector : '.slick-viewport'
		},
		// register this view to listen to the collection events
		bindModelEvents : function() {
			if(this.collection) {
				this.collection.bind('change', this.onChange, this);
				this.collection.bind('add', this.onAddModel, this);
				this.collection.bind('remove', this.onRemoveModel, this);
				this.collection.bind('reset', this.onCollectionReset, this);
				this.collection.bind('fetch', this.showLoadingMask, this);
				this.collection.bind('dataFetched', this.hideLoadingMask, this);
			}
		},
		// render the content of this view
		renderContent : function() {
			console.log("Render Content");
			var selection = this.options.selection;

			var self = this;
			var dataView = new Slick.Data.DataView();
			if(this.collection) {
				this.options.items = [];
				this.collection.each(function(model) {
					self.options.items.push(model.toSlickItem());
				});
			}

			dataView.setItems(this.options.items);

			var collection = this.collection;

			// slick grid config
			var config = {
				enableAsyncPostRender : true,
				asyncPostRenderDelay : 10,
				forceFitColumns : true,
				multiSelect : true
			}

			// _.extend(config, this.options);

			var selectedRowIds = [];

			var grid = new Slick.Grid(this.$el, dataView.rows, this.options.columns, config);
			// this.grid.setSelectionModel(new Slick.RowSelectionModel());

			grid.onSelectedRowsChanged = function() {
				selectedRowIds = [];
				selectedModels = [];
				var rows = grid.getSelectedRows();
				for(var i = 0, l = rows.length; i < l; i++) {
					var item = dataView.rows[rows[i]];
					if(item) {
						selectedRowIds.push(item.id);
						selectedModels.push(collection.get(item.id));
					}
				}
				selection.reset(selectedModels);
			};

			grid.onKeyDown = function(e, currentRow) {
				self.trigger('keyDown', e, self.collection.get(dataView.rows[currentRow][self.options.itemIdKey]));
				return false;
			};

			grid.onSort = function(sortCol, sortAsc) {
				sortdir = sortAsc ? 1 : -1;
				sortcol = sortCol.field;

				// use numeric sort of % and lexicographic for everything else
				dataView.fastSort((sortCol.sortFn) ? sortCol.sortFn : sortcol, sortAsc);
			};

			grid.onDblClick = function(e, row) {
				self.trigger('doubleClick', self.collection.get(dataView.rows[row][self.options.itemIdKey], e));
				return true;
			}

			grid.onClick = function(e, row) {
				self.trigger('click', self.collection.get(dataView.rows[row][self.options.itemIdKey], e));
				return false;
			}

			dataView.onRowsChanged.subscribe(function(rows) {
				grid.removeRows(rows);
				grid.render();

				if(selectedRowIds.length > 0) {
					// since how the original data maps onto rows has changed,
					// the selected rows in the grid need to be updated
					var selRows = [];
					for(var i = 0; i < selectedRowIds.length; i++) {
						var idx = dataView.getRowById(selectedRowIds[i]);
						if(idx != undefined) {
							selRows.push(idx);
						}
					}

					grid.setSelectedRows(selRows);
				}
			});

			grid.onContextMenu = function(e, row, cell) {
				grid.setSelectedRows([row]);
				return true;
			}
			this.dataView = dataView;
			this.grid = grid;

			this.renderLoadingMask("Lade Daten ...");
			this.unbind('afterShow');
			this.bind('afterShow', function() {
				self.afterShow();
			});
			this.unbind('beforeHide');
			this.bind('beforeHide', function() {
				self.beforeHide();
			});
		},
		resizeContent : function() {
			/// console.log("on table resize");
			// this.grid.resizeCanvas();
		},
		createColumns : function() {
			var slickColumns = [];
			_.each(this.options.columns, function(col) {
				var slickCol = col;
				var pi = col.field.indexOf(".");
				if(pi > 0) {

					var keys = col.field.split(".");
					var sortFn = function() {
						var v = this;
						for(var i = 0; i < keys.length && !_.isUndefined(v) && v != null; i++) {
							v = v[keys[i]];
						};
						if(!_.isUndefined(v) && v != null) {
							return v.toString().toLowerCase();
						}
						return "";
					}
					var keys2 = col.field.split(".");
					var field = keys2.shift();
					var formatFn = col.formatter;
					var formatter = function(r, c, v) {
						for(var i = 0; i < keys2.length && !_.isUndefined(v) && v != null; i++) {
							v = v[keys2[i]];
						};
						if(formatFn) {
							return formatFn(r, c, v);
						}
						return v;
					}
					slickCol["field"] = field;
					slickCol["formatter"] = formatter;
					slickCol["sortFn"] = sortFn;
				}

				slickColumns.push(slickCol);

			});
			return slickColumns;
		},
		_getItemId : function(item) {
			if(this._isModelItem(item))
				return item.get(itemIdKey);
			return item[itemIdKey];
		},
		_getItemData : function(item) {
			if(this._isModelItem(item))
				return item.toSlickItem();
			return item;
		},
		_isModelItem : function(item) {
			return _.isFunction(item.toJSON);
		},
		onChange : function(model) {
			// console.log("SLICKGRID CHANGE EVENT")
			this.dataView.beginUpdate();
			this.dataView.updateItem(model.get(this.options.itemIdKey), model.toSlickItem());
			this.dataView.endUpdate();
		},
		onCollectionReset : function() {
			var items = [];
			this.collection.each(function(model) {
				items.push(model.toSlickItem());
			});
			this.dataView.beginUpdate();
			this.dataView.setItems(items);
			this.dataView.endUpdate();
		},
		onAddModel : function(model) {
			this.dataView.beginUpdate();
			this.dataView.addItem(model.toSlickItem());
			this.dataView.endUpdate();
		},
		onRemoveModel : function(model) {
			this.dataView.beginUpdate();
			this.dataView.deleteItem(model.get(this.options.itemIdKey));
			this.dataView.endUpdate();
		},
		// item to the view
		addItem : function(item) {
			this.dataView.beginUpdate();
			this.dataView.addItem(this._getItemData(item));
			this.dataView.endUpdate();
		},
		// remove item from view
		removeItem : function(item) {
			this.dataView.beginUpdate();
			this.dataView.deleteItem(this._getItemId(item));
			this.dataView.endUpdate();
		},
		// set an array of items to the view
		setItems : function(items) {
			this.dataView.beginUpdate();
			this.dataView.setItems(items);
			this.dataView.endUpdate();
		},
		updateItem : function(item) {
			this.dataView.beginUpdate();
			this.dataView.updateItem(this._getItemId(item), this._getItemValue(item));
			this.dataView.endUpdate();
		},
		// returns the number of list items
		getSize : function() {
			return this.collection.size();
		},
		getSelectedItems : function() {
			return this.selection.models;
		},
		getSelection : function() {
			return this.selection;
		},
		afterShow : function() {
			var self = this;
			window.setTimeout(function() {
				self.$el.find('.slick-viewport').scrollTop(self.scrollTop);
			}, 400);
		},
		beforeHide : function() {
			var viewport = this.$el.find('.slick-viewport').first();
			this.scrollTop = viewport.scrollTop();
		},
		focus: function(){
			this.$el.find('.grid-canvas').focus();
		}
	});

	// Mixin
	_.extend(UI.SlickGridView.prototype, UI.LoadingMask);

})();

(function() {

	UI.SplitView = UI.View.extend({
		defaultOptions : {
			fitLayout : true,
			leftViewWidth : 200,
			leftView : new UI.View({}),
			rightView : new UI.View({
				innerHTML: "Content"
			}),
			resizable : true
		},
		renderContent : function() {
			this.renderChildView(this.options.leftView);

			this.options.leftView.$el.css({
				"height" : this.$el.height(),
				"float" : "left",
				"width" : this.options.leftViewWidth,
				"top" : "0px",
				"left" : "0px"
			});

			this.renderChildView(this.options.rightView);

			this.options.rightView.$el.css({
				"height" : this.$el.height(),
				"float" : "left"
			});

			if(this.options.resizable) {
				this.options.leftView.$el.resizable({
					containment : this.$el,
					minWidth : 100,
					handles : 'e'
				})
			}
			
			this.layoutElements();
		},
		layoutElements : function() {
			var self = this;
			
			this.options.leftView.$el.resize(function(e) {
				self.resizeRightView();
			});
			
			this.resizeContent();
		},
		resizeContent : function() {
			var height = this.getHeight();
			this.options.leftView.set({"height": height});
			this.options.rightView.set({"height": height});
			
			this.options.leftView.resize();
		},
		resizeRightView: function(){
			var width = this.getWidth() - this.options.leftView.getWidth();
			this.options.rightView.set({"width": width});
			this.options.rightView.resize();
		}
	});

})();

(function() {
	UI.TabView = UI.View.extend({
		defaultOptions : {
			linkListView : new UI.ListView({
				className : 'tabs',
				itemToView : function(view) {
					var title = "";
					if(view.has('title'))
						title = view.get('title');
					return new UI.LinkView({
						selectable : true,
						label : title
					});
				}
			}),
			segmentedView : new UI.SegmentedView({
				fitLayout : false,
				className : 'tab-content'
			}),
			emptyView : new UI.View({}),
			tabViews : []
		},
		renderContent : function() {
			this.renderedTabViews = [];

			// configure linkLisView
			this.options.linkListView.set({
				multiSelect : false,
				needsSelection : true,
				items : this.options.tabViews
			});

			// render link list view without items, if linkListView is not already rendered!
			this.renderChildView(this.options.linkListView);

			// render segmented view which displays the tabs
			this.renderChildView(this.options.segmentedView);

			// set the tabViews
			// this.setTabViews(this.options.tabViews);
			var self = this;
			this.options.linkListView.bind('change:selectedItems', function(views, items) {
				self.showTabView(items[0]);
			});
			if(this.options.tabViews.length > 0) {
				this.showTabView(this.options.tabViews[0]);
			}
		},
		showTabView : function(view) {
			// be sure that the link is activated
			if(this.options.linkListView.getSelectedItems()[0] != view) {
				this.options.linkListView.selectItem(view);
			}
			this.options.segmentedView.set({
				visibleView : view
			});
		},
		setTabViews : function(views) {
			var self = this;

			_.each(this.renderedTabViews, function(view) {
				self.removeTabView(view);
			});

			_.each(views, function(view) {
				self.addTabView(view);
			});

			this.options.tabViews = views;
		},
		// add a tab View
		addTabView : function(view) {
			this.options.linkListView.addItem(view);
			this.renderedTabViews.push(view);
		},
		// remove a tab view
		removeTabView : function(view) {
			var index = -1;
			// find index of view
			_.each(this.renderedTabViews, function(v, i) {
				if(v == view) {
					index = i;
				}
			});
			if(index == -1)
				return;

			// remove from linkList view
			this.options.linkListView.removeItem(view);

			// remove from tabViews array
			this.renderedTabViews.slice(index, 1);

			// set new visible view
			if(view == this.options.segmentedView.getCurrentView()) {
				var v;
				if(this.renderedTabViews.length > 0) {
					if(index >= this.renderedTabViews.length)
						index = this.renderedTabViews.length - 1;
					v = this.renderedTabViews[index];
				} else {
					v = this.options.emptyView;
				}
				this.options.segmentedView.setVisibleView(v);
			}

		}
	})
})();

(function() {

	UI.WorkspaceView = UI.View.extend({
		defaultOptions : {
			fitLayout : true,
			topViewHeight : 40,
			bottomViewHeight : 40,
			contentView : new UI.View()
		},
		renderContent : function() {
			this.contentView = (!this.options.contentView ? null : this.options.contentView);
			this.topView = (!this.options.topView ? null : this.options.topView);
			this.bottomView = (!this.options.bottomView ? null : this.options.bottomView);

			if(this.topView) {
				this.renderChildView(this.topView);
			}

			if(this.contentView) {
				this.renderChildView(this.contentView);
			}

			if(this.bottomView) {
				this.renderChildView(this.bottomView);

			}
			this.layoutElements();
		},
		layoutElements : function() {
			this.$el.css({
				'position' : 'relative'
			});

			var height;
			if(this.topView) {
				height = this.options.topViewHeight;
				this.topView.set({height:height});
			}

			var self = this;
			if(this.bottomView) {
				height = this.options.bottomViewHeight;
				this.bottomView.$el.css({
					"position" : "absolute",
					"bottom" : 0,
					"left" : 0,
					"right" : 0,
					"height" : height
				})
			}
			this.resizeContent();
		},
		calculateContentHeight : function() {
			var height = this.getHeight();
			if(this.topView) {
				height -= this.options.topViewHeight;
			}
			if(this.bottomView) {
				height -= this.options.bottomViewHeight;

			}
			return height;
		},
		resizeContent : function() {
			this.contentView.set({height: this.calculateContentHeight()});
			this.contentView.resize();
		}
	});

})();

(function() {

	UI.CheckboxFieldView = UI.FieldView.extend({
		optionSelector : 'input:checkbox',
		selectionAttribute : 'checked',
		defaultOptions : {
			multiSelect : true,
			optionTemplate : 'fields/checkbox_input',
			valueKey : "value",
			labelKey : 'label'
		},
		getValueForModel : function() {
			var v = {};
			var val;
			var $input = this.getOptionElements();
			var size = $input.size();
			var self = this;
			val = [];
			$input.each(function(index) {
				if($(this).attr(self.selectionAttribute)) {
					var v = self.options.items[index][self.options.valueKey];
					if(self.options.multiSelect) {
						val.push(v);
					} else {
						val = v;
					}
				} else if(size == 1) {
					val = (v == self.options.items[index][self.options.valueKey]);
				}
			});
			return val;
		},
		renderInputElement : function() {
			this.renderItems(this.options.items);
		},
		bindInputEvents : function() {
			var self = this;
			this.getInputElement().bind('change', function() {
				self.onInputValueChange();
			});
		},
		renderInputValue : function(value) {
			var self = this;
			// find the checkbox elements and set the checked attribute
			this.getOptionElements().each(function(index) {
				var $cb = $(this);
				var select = false;
				var val = self.options.items[index][self.options.valueKey];
				if(self.options.multiSelect === true && _.isArray(value)) {
					select = _.contains(value, val)
				} else {
					select = (val == value);
				}
				if(select === true) {
					$cb.attr(self.selectionAttribute, self.selectionAttribute);
				} else if($cb.attr(self.selectionAttribute)) {
					$cb.removeAttr(self.selectionAttribute);
				}
			});
		},
		renderItems : function(items) {
			if(this.isRendered()) {
				this.getOptionElements().remove();
				var self = this;
				_.each(this.options.items, function(item) {
					self.renderItem(item);
				});
				var $inputElement = this.getInputElement();
				$inputElement.attr('name', this.options.name);
				this.$input = $inputElement;
			}
			this.options.items = items;
		},
		renderItem : function(item) {
			this.$inputWrapper.append(JST[this.options.optionTemplate]({
				label : item[this.options.labelKey],
				value : item[this.options.valueKey],
				item : item
			}));
		},
		getInputElement : function() {
			return this.$inputWrapper.find(this.optionSelector);
		},
		getOptionElements : function() {
			return this.$inputWrapper.find(this.optionSelector);
		}
	});

})();

(function() {

	UI.DateFieldView = UI.FieldView.extend({
		defaultOptions : {
			inputTemplate : 'fields/date_input',
			dateFormat : 'yyyy-MM-dd'
		},
		renderInputElement : function() {
			this.$day = this.$el.find('select.day').first();
			this.$month = this.$el.find('select.month').first();
			this.$year = this.$el.find('input.year').first();
			
			// render month names
			// this.renderDaySelection();
			this.renderMonthSelection();
			
			this.$day.attr({
				'id' : this.options.fieldId
			});
		},
		bindInputEvents : function() {
			var self = this;
			
			this.$day.bind('change', function() {
				self.onInputValueChange();				
			});
			this.$month.bind('change', function() {
				self.onInputMonthChange();
			});
			this.$year.bind('change', function() {
				self.onInputYearChange();
			});
		},
		onInputYearChange: function(){
			var year = parseInt(this.$year.val()); 
			this.onInputMonthChange();
		},
		onInputMonthChange: function(){
			var day = parseInt(this.$day.val());
			var month = parseInt(this.$month.val());
			var year = parseInt(this.$year.val()); 
			
			var days = Date.getDaysInMonth(year,month);
			this.renderDaySelection(days);
			if(day > days){
				this.$day.val(days);
			}else{
				this.$day.val(day);
			}
			
			this.onInputValueChange();
		},
		renderDaySelection: function(days){
			if(this.$day.children().length == days) return;
			this.$day.empty();
			var label = "";
			for(var i = 1; i <= days; i++){
				label = (i < 10) ? "0" + i : i;
				this.$day.append("<option value='"+i+"'>"+label+"</option>");
			}
			
		},
		renderMonthSelection: function(){
			this.$month.empty();
			var months = Date.CultureInfo.monthNames;
			var label = "";
			for(var i = 0; i < 12; i++){
				this.$month.append("<option value='"+i+"'>"+months[i]+"</option>");
			}
			
		},
		renderInputValue : function(value) {
			var date = Date.parseExact(value, this.options.dateFormat);
			if(!date) {
				throw "Couldn't parse Date. Please specify format!";
			}
			this.renderDaySelection(Date.getDaysInMonth(date.getFullYear(),date.getMonth()));
			
			this.$month.val(date.getMonth());
			this.$day.val(date.getDate());
			
			this.$year.val(date.getFullYear());
		},
		getValueForModel : function() {
			
			var v = {};
			var y = parseInt(this.$year.val()), m = parseInt(this.$month.val()), d = parseInt(this.$day.val());
			try {
				Date.validateDay(d, y, m);
			} catch(e) {
				return null;
			}
			var date = new Date(y,m,d);
			// to prevent char input in firefox
			if(date.toString() == "Invalid Date"){
				return null;
			}
			return date.toString(this.options.dateFormat);
		},
		getInputElement: function(){
			return this.$inputWrapper.find('select,input');
		}
	});

})();

(function() {

	UI.RadioboxFieldView = UI.CheckboxFieldView.extend({
		optionSelector : 'input:radio',
		defaultOptions : {
			multiSelect : false,
			optionTemplate : 'fields/radiobox_input',
			valueKey : "value",
			labelKey : 'label'
		}
	});

})();

(function() {

	UI.SelectFieldView = UI.CheckboxFieldView.extend({
		optionSelector : 'option',
		selectionAttribute : 'selected',
		defaultOptions : {
			inputTemplate : 'fields/select_input',
			multiSelect : false,
			valueKey: 'value',
			labelKey: 'label'
		},
		renderInputElement : function() {
			this.$select = this.$el.find('select').first();
			this.$select.attr({
				'id' : this.options.fieldId,
				'name' : this.options.name
			});
			if(this.options.multiSelect === true) {
				this.$select.attr('multiple', 'multiple');
			}
			this.renderItems(this.options.items);
		},
		renderItem: function(item){
			this.$select.append("<option value='" + item[this.options.valueKey] + "'>" + UI.loc(item[this.options.labelKey]) + "</option>");
		},
		bindInputEvents : function() {
			var self = this;
			this.$select.bind('change', function() {
				self.onInputValueChange();
			});
		},
		getInputElement : function() {
			return this.$select;
		},
		getOptionElements : function(){
			return this.$select.find('option');
		}
	});

})();

(function() {

	UI.TextFieldView = UI.FieldView.extend({
		defaultOptions: {
			inputTemplate : 'fields/text_input',
			type: 'text',
			placeholder: ''
		},
		getValueForModel: function(){
			if(this.$input.attr('disabled')) return null; 
			return this.$input.val();
		},
		renderInputElement: function(){
			this.$input = this.$el.find('input').first();
			this.$input.attr({
				'id' : this.options.fieldId,
				'name' : this.options.name,
				'placeholder' : this.options.placeholder
			});
		},
		bindInputEvents: function(){
			var self = this;
			this.$input.bind('change',function(){
				self.onInputValueChange();
			});
		},
		renderInputValue: function(value){
			this.$el.find('input').first().val(value);
		},
		getType: function(){
			return this.options.type;
		},
		getInputElement: function(){
			return this.$input;
		}
	});

})();

(function() {

	UI.TextareaFieldView = UI.FieldView.extend({
		defaultOptions: {
			inputTemplate : 'fields/textarea_input',
			rows: 3
		},
		getValueForModel: function(){
			if(this.$textarea.attr('disabled')) return null; 
			return this.$textarea.html();
		},
		renderInputElement: function(){
			this.$textarea = this.$el.find('textarea').first();
			this.$textarea.attr({
				'id' : this.options.fieldId,
				'name' : this.options.name
			});
		},
		bindInputEvents: function(){
			var self = this;
			this.$textarea.bind('change',function(){
				self.onInputValueChange();
			});
		},
		renderInputValue: function(value){
			this.$textarea.html(value);
		},
		getType: function(){
			return this.options.type;
		},
		getInputElement: function(){
			return this.$textarea;
		},
		getRows: function(){
			return this.options.rows;
		}
	});

})();
